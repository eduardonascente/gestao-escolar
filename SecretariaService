package gestao.gestor.service;

import gestao.gestor.model.Aluno;
import gestao.gestor.model.Professor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Service
public class SecretariaService {

    private final List<Aluno> alunos;
    private final List<Professor> professores;

    public SecretariaService() {
        this.alunos = new ArrayList<>();
        this.professores = new ArrayList<>();
    }

    // Método para cadastrar um aluno
    public String cadastrarAluno(int id, String nome, String cpf, String filiacao, LocalDate dataNascimento) {
        Aluno aluno = new Aluno(id, nome, cpf, filiacao, dataNascimento);
        alunos.add(aluno);
        return "Aluno " + nome + " cadastrado com sucesso!";
    }

    // Método para cadastrar um professor
    public String cadastrarProfessor(int id, String nome, String cpf, String formacao, LocalDate dataNascimento) {
        Professor professor = new Professor(id, nome, cpf, formacao, dataNascimento);
        professores.add(professor);
        return "Professor " + nome + " cadastrado com sucesso!";
    }

    // Método para listar todos os alunos cadastrados
    public List<Aluno> listarAlunos() {
        return alunos;
    }

    // Método para listar todos os professores cadastrados
    public List<Professor> listarProfessores() {
        return professores;
    }

    // Método para matricular um aluno em uma turma (simplificado)
    public String matricularAluno(int alunoId) {
        Aluno aluno = alunos.stream()
                .filter(a -> a.getId() == alunoId)
                .findFirst()
                .orElse(null);

        if (aluno != null) {
            return "Aluno " + aluno.getNome() + " matriculado com sucesso!";
        } else {
            return "Erro: Aluno não encontrado.";
        }
    }

    // Método para listar a idade de todos os alunos
    public List<String> listarIdadeAlunos() {
        List<String> idades = new ArrayList<>();
        for (Aluno aluno : alunos) {
            idades.add(aluno.getNome() + " tem " + aluno.calcularIdade() + " anos.");
        }
        return idades;
    }

    // Método para listar a idade de todos os professores
    public List<String> listarIdadeProfessores() {
        List<String> idades = new ArrayList<>();
        for (Professor professor : professores) {
            idades.add(professor.getNome() + " tem " + professor.calcularIdade() + " anos.");
        }
        return idades;
    }
}
